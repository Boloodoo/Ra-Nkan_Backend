// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: orders.sql

package db

import (
	"context"
	"encoding/json"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
    user_id,
    items
) VALUES (
    $1, $2) RETURNING id, user_id, items, created_at, updated_at
`

type CreateOrderParams struct {
	UserID int64           `json:"user_id"`
	Items  json.RawMessage `json:"items"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder, arg.UserID, arg.Items)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Items,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrderById = `-- name: GetOrderById :one
SELECT id, user_id, items, created_at, updated_at FROM orders WHERE id = $1
`

func (q *Queries) GetOrderById(ctx context.Context, id int64) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrderById, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Items,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrdersByUser = `-- name: GetOrdersByUser :many
select id, user_id, items, created_at, updated_at FROM orders WHERE user_id = $1
`

func (q *Queries) GetOrdersByUser(ctx context.Context, userID int64) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, getOrdersByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Items,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
