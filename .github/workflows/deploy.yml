# This workflow will build a golang project and deploy to prodyction
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Deploy to Production

on:
  push:
    branches: [ "main" ]

jobs:

  build:
    name: Build image
    runs-on: ubuntu-latest


    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    - name: Extract and write to app.env
      env:
        DB_DRIVER_LIVE: ${{ secrets.DB_DRIVER_LIVE }}
        DB_SOURCE_LIVE: ${{ secrets.DB_SOURCE_LIVE }}
      run: |
        # Write the extracted values to the app.env file
        echo "DB_DRIVER_LIVE=$DB_DRIVER_LIVE" > app.env
        echo "DB_SOURCE_LIVE=$DB_SOURCE_LIVE" >> app.env
      shell: bash
      
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: 'true'

    - name: Build, tag and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ra_nkan
        IMAGE_TAG: ${{ github.sha }}
      run:  |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG